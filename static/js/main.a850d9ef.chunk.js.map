{"version":3,"sources":["reportWebVitals.js","Persist.js","memo/Item.js","memo/Memo.js","memo/AddForm.js","memo/FindForm.js","memo/DelForm.js","memo/MemoPage.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","usePersist","ky","initVal","key","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","savedValue","setSavedValue","val","setItem","stringify","Item","props","d","Date","value","created","f","getMonth","getDate","getHours","getMinutes","style","width","index","message","textAlign","Memo","memo","fmemo","mode","setMode","data","map","className","AddForm","setMemo","setMessage","onSubmit","e","unshift","action","type","placeholder","onChange","target","required","FindForm","setFMemo","res","filter","includes","DelForm","num","setNum","items","substring","defaultValue","MemoPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a850d9ef.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react'\n// ここではキーの名前を示す定数Keyの他に、valueとsetValueという二つの関数を用意している。\n\n\nfunction usePersist(ky, initVal) {\n    // keyにhooks:~となるよう値をセット。\n    const key = \"hooks:\" + ky\n    const value = () => {\n        // try~catch文は試す処理を定義し、例外が怒った時の挙動を指定する\n        try {\n            // itemにローカルストレージのkeyに対応するデータを渡す。\n            const item = window.localStorage.getItem(key)\n            // ？はif文の短縮形 trueを返したら、その後の処理をする\n            // ここでは、ローカルストレージにitemデータがあればJSON形式を元に戻して返す。\n            return item ? JSON.parse(item) : initVal\n        } catch (error) {\n            console.log(error)\n            return initVal;\n        }\n    }\n\n    // 引数valの値をJSON形式のテキストに変換してローカルストレージに保管\n    const setValue = (val) => {\n        try {\n            // setSavedValueは、この後のsavedValueステートに値を設定するためのもの。\n            setSavedValue(val)\n            window.localStorage.setItem(key, JSON.stringify(val))\n        }catch (error) {\n            console.log(error)\n        }\n    }\n\n    // saveValueは保管する値を保持するためのステート\n    // useState(value)では、valueを使って値が取り出されるようになっている。\n    const [savedValue, setSavedValue] = useState(value)\n\n    return [savedValue, setValue]\n}\n\nexport default usePersist\n","import React, { useState, useEffect } from 'react'\n\nfunction Item(props) {\n    const th = {\n        width: \"100px\"\n    }\n    const td = {\n        textAlign: \"right\",\n        width: \"150px\"\n    }\n    let d = new Date(Date.parse(props.value.created))\n    let f = d.getMonth() + '/' + d.getDate() + ' '\n        + d.getHours() + ':' + d.getMinutes()\n\n    return (\n        <tr>\n            {/* Memoコンポーネントで、indexを渡したので、propsが使える */}\n            <th style={th}>No, {props.index}</th>\n            <td>{ props.value.message}</td>\n            <td style={td}>{f}</td>\n        </tr>\n    )\n}\n\nexport default Item\n\n","import React, { useState, useEffect } from 'react'\nimport usePersist from '../Persist'\nimport Item from './Item'\n\n// やってることはデータをテーブルに書き出している。\n\nfunction Memo() {\n    // memoというステートにkey:memoと初期値を渡している。\n    const [memo, setMemo] = usePersist(\"memo\", [])\n    const [fmemo, setFMemo] = usePersist(\"findMemo\", [])\n    const [mode, setMode] = usePersist(\"mode\", 'default')\n\n    let data = []\n\n    // switchをしているのは、追加や検索、それぞれのモードに応じてメモを表示させるため。\n    switch (mode) {\n        // 追加と削除の時は'default'モード\n        case 'default':\n            // mapメソッドを使って、配列から要素を取り出して、ステートに渡している。\n            data = memo.map((value, key)=>(\n                <Item key={value.message} value={value} index={key + 1} />\n            ))\n            // deafult => defaultにすると無限ループ発生\n            setMode('')\n            break\n\n        // 検索の時は、'find'モード\n        case '検索中':\n            data = fmemo.map((value, key) => (\n                // Itemにステートを渡している。\n                <Item key={value.message} value={value} index={key + 1}/>\n            ))\n            break\n\n        default:\n            data = memo.map((value, key) => (\n                <Item key={value.message} value={value} index={key + 1}/>\n            ))\n    }\n\n    return (\n        <table className=\"table mt-4\">\n            <tbody>{ data }</tbody>\n        </table>\n    )\n}\n\nexport default Memo\n\n","import React, { useState, useEffect } from 'react'\nimport usePersist from '../Persist'\n\n// ここはメモを追加するコンポーネントじゃ\n\nfunction AddForm(props) {\n    const [memo, setMemo] = usePersist(\"memo\", [])\n    const [message, setMessage] = useState('')\n\n    // 記入すると呼び出される\n    // メッセージをステートにセットしてる\n    const doChange = (e) => {\n        // targetはここではメモのテキスト内容\n        setMessage(e.target.value)\n    }\n\n    // 送信時に呼び出される\n    const doAction = (e) => {\n        const data = {\n            message: message,\n            created: new Date()\n            // 配列に加えるものを定義\n            // ここでは、メッセージと制作日\n        }\n        // メモに配列を加えている,\n        // unshift は 配列に値を追加するJSメソッド\n        memo.unshift(data)\n        // メモステートを更新している\n        setMemo(memo)\n        // 送信後、メモ内のテキストを空にする\n        setMessage('')\n    }\n\n    return (\n        <form onSubmit={doAction} action=\"\" className=\"mb-2\">\n            <div className=\"from-group row\">\n                <input type=\"text\" className=\"form-control-sm col\"\n                    placeholder=\"メモの追加\"\n                    onChange={doChange} value={message} required />\n                <input type=\"submit\" value=\"追加\"\n                    className=\"btn btn-primary btn-sm col-2\"\n                />\n            </div>\n        </form>\n    )\n}\n\nexport default AddForm","import React, { useState, useEffect, memo } from 'react'\nimport usePersist from '../Persist'\n\n// ここはmemoを検索するためのコンポーネントじゃ\n\nfunction FindForm() {\n    // ここでは４つのstateを受け取る準備をしている\n    const [memo, setMemo] = usePersist(\"memo\", [])\n    const [fmemo, setFMemo] = usePersist(\"findMemo\", [])\n    const [message, setMessage] = usePersist('')\n    const [mode, setMode] = usePersist('mode', 'find')\n\n    const doChange = (e) => {\n        setMessage(e.target.value)\n    }\n\n    const doAction = (e) => {\n        if (message == '') {\n            // なにもメッセージが保存されていなかったら、modeをdefaultに戻す処理\n            setMode('default')\n            return\n        }\n        let res = memo.filter((item, key) => {\n            // includesメソッドは、特定の要素が配列に含まれているかを探すメソッド\n            // messageはdoChangeで受けとている。\n            return item.message.includes(message)\n        })\n        setFMemo(res)\n        setMode('検索中')\n        setMessage('')\n    }\n\n    return (\n        <form onSubmit={doAction} className=\"my-2\">\n            <div className=\"form-group row\">\n                <input type=\"text\" onChange={doChange}\n                    value={message} className=\"form-control-sm col\"\n                    placeholder=\"検索： キーワードを入力\"\n                />\n                <input type=\"submit\" value=\"さがす\"\n                    className=\"btn btn-primary btn-sm col-2\"\n                />\n            </div>\n        </form>\n    )\n}\n\nexport default FindForm","import React, { useState, useEffect, memo } from 'react'\nimport usePersist from '../Persist'\n// ここは保存された値を削除するためのコンポーネントじゃ\n\nfunction DelForm() {\n    // 保存されたmemoの値を[]に書き換えることで削除している。\n    const [memo, setMemo] = usePersist(\"memo\", [])\n    const [num, setNum] = useState(0)\n\n    const doChange = (e) => {\n        setNum(e.target.value)\n    }\n\n    const doAction = (e) => {\n        // filterメソッド\n        let res = memo.filter((item, key) => {\n            // key以外を取り除いた配列が作られる\n            return key != num\n        })\n        // 作成、編集された配列をsetMemoする\n        setMemo(res)\n        // 選択項目の番号を０に戻す\n        setNum(0)\n    }\n\n    let items = memo.map((value, key) =>(\n        <option key={key} value={key}>\n            {value.message.substring(0,10)}\n        </option>\n    ))\n\n    return (\n        <form onSubmit={doAction} className=\"my-2\">\n            <div className=\"form-group row\">\n                <select onChange={doChange}\n                    className=\"form-control-sm col\"\n                    // 選択欄の一番上が０になるように\n                    defaultValue=\"-1\"\n                >\n                    {items}\n                </select>\n                <input type=\"submit\" value=\"削除\"\n                    className=\"btn btn-primary btn-sm col-2\"\n                />\n            </div>\n        </form>\n    )\n}\n\nexport default DelForm","import usePersist from '../Persist'\nimport Memo from './Memo';\nimport AddForm from './AddForm';\nimport FindForm from './FindForm';\nimport DelForm from './DelForm';\n\nfunction MemoPage() {\n    const [mode, setMode] = usePersist('mode', 'default')\n\n    return (\n        <div>\n            <h5 className=\"my-3\">{ mode }</h5>\n            <div className=\"alert alert-info pb-0\">\n                {/* 追加フォームとボタン */}\n                <AddForm />\n                {/* 探すフォームとボタン */}\n                <FindForm />\n                {/* 削除フォームとボタン */}\n                <DelForm/>\n            </div>\n            {/* 登録したメモが出てくるところ */}\n            <Memo/>\n        </div>\n    )\n}\n\nexport default MemoPage","import './App.css'\nimport MemoPage from './memo/MemoPage'\n\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"bg-info text-white display-4\"> README.md用 Memo </h1>\n      <div className=\"container mt-3\">\n        <h4 className=\"my-3\"></h4>\n        {/* メモのメイン全体画面を読み込んでいる */}\n        < MemoPage />\n      </div>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* App.jsを読み込んでいる */}\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}